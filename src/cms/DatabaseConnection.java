package cms;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;




/**
 * Manages the connection to the CMS database.
 * This class provides methods to establish, close, and test the database connection,
 * execute SQL queries, and prepare statements.
 */
public class DatabaseConnection {
    
  private static final String DB_URL = "jdbc:mysql://localhost:3306/";
  private static final String DB_USER = "pooa2024";
  private static final String DB_PASSWORD = "pooa2024";
    
  private Connection connection;
     

/**
 * Constructs a new DatabaseConnection object and establishes a connection to the database.
 * If the connection fails, an error message is printed to the console.
 */
public DatabaseConnection() {
        try {
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);    
        
          } catch (SQLException e) {
             System.out.println("Failed to connect to the database.");
             e.printStackTrace();
         }
    }
       
    
/**
 * Closes the database connection.
 * If the connection is not closed successfully, an error message is printed to the console.
 */
public void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Database connection closed.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
/**
* Executes specified SQL query and returns the result set.
* If the query execution fails, an error message is printed to the console.
*
* @param query The SQL query to execute.
* @return The result set generated by the query, or null if an error occurs.
*/    
public ResultSet executeQuery(String query) {
        try {
            Statement statement = connection.createStatement();
            return statement.executeQuery(query);
        } catch (SQLException e) {
            System.out.println("Failed to execute query: " + query);
            e.printStackTrace();
            return null;
        }
    }
/**
 * Tests the database connection and prints the result to the console.
 * If the connection works, "Database connection test successful." is printed;
 * otherwise, "Database connection test failed.".
 */     
public void testConnection() {
        if (connection != null) {
            System.out.println("Database connection test successful.");
        } else {
            System.out.println("Database connection test failed.");
        }
    }
    
/**
 * Creates a prepared statement for the specified SQL query.
 *
 * @param query The SQL query for which to create the prepared statement.
 * @return The prepared statement object.
 * @throws SQLException if a database access error occurs.
 */
public PreparedStatement prepareStatement(String query) throws SQLException {
        return connection.prepareStatement(query);
    }



/**
 * 
 *
 * @return The established database connection.
 */
public Connection establishConnection() {
        return connection;
    }

}







